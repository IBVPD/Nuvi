imports:
    - { resource: parameters.yml }
    - { resource: security.yml }

framework:
    #esi:             ~
    translator:      { fallback: %locale% }
    secret:          %secret%
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_proxies: ~
    session:
      name: WorldHealthOrganizationSentinelNetwork
      save_path: /tmp/nuvi
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            %kernel.debug%
    strict_variables: %kernel.debug%
    form:
      resources:
        - 'NSAceBundle:Form:fields.html.twig'

# Assetic Configuration
assetic:
    debug:          %kernel.debug%
    use_controller: false
    bundles:        [ ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: %kernel.root_dir%/Resources/java/compiler.jar
        #yui_css:
        #    jar: %kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar

# Doctrine Configuration
doctrine:
    dbal:
        driver:   %database_driver%
        host:     %database_host%
        port:     %database_port%
        dbname:   %database_name%
        user:     %database_user%
        password: %database_password%
        charset:  UTF8
        # if using pdo_sqlite as your database driver, add the path in parameters.yml
        # e.g. database_path: %kernel.root_dir%/data/data.db3
        # path:     %database_path%
        types:
            TripleChoice: NS\SentinelBundle\Entity\Types\TripleChoice
            Doses: NS\SentinelBundle\Entity\Types\Doses
            Diagnosis: NS\SentinelBundle\Entity\Types\Diagnosis
            CXRResult: NS\SentinelBundle\Entity\Types\CXRResult
            DischargeOutcome: NS\SentinelBundle\Entity\Types\DischargeOutcome
            CSFAppearance: NS\SentinelBundle\Entity\Types\CSFAppearance
            Role: NS\SentinelBundle\Entity\Types\Role
            Gender: NS\SentinelBundle\Entity\Types\Gender
            GAVIEligible: NS\SentinelBundle\Entity\Types\GAVIEligible
            BinaxResult: NS\SentinelBundle\Entity\Types\BinaxResult
            LatResult: NS\SentinelBundle\Entity\Types\LatResult
            PCRResult: NS\SentinelBundle\Entity\Types\PCRResult
            GramStain: NS\SentinelBundle\Entity\Types\GramStain
            IsolateType: NS\SentinelBundle\Entity\Types\IsolateType
            SampleType: NS\SentinelBundle\Entity\Types\SampleType
            Volume: NS\SentinelBundle\Entity\Types\Volume
            SerotypeIdentifier: NS\SentinelBundle\Entity\Types\SerotypeIdentifier
            PathogenIdentifier: NS\SentinelBundle\Entity\Types\PathogenIdentifier
        mapping_types:
            TripleChoice: TripleChoice
            Doses: Doses
            Diagnosis: Diagnosis
            CXRResult: CXRResult
            DischargeOutcome: DischargeOutcome
            CSFAppearance: CSFAppearance
            Role: Role
            Gender: Gender
            GAVIEligible: GAVIEligible
            BinaxResult: BinaxResult
            LatResult: LatResult
            PCRResult: PCRResult
            GramStain: GramStain
            IsolateType: IsolateType
            SampleType: SampleType
            Volume: Volume
            SerotypeIdentifier: SerotypeIdentifier
            PathogenIdentifier: PathogenIdentifier
    orm:
        auto_generate_proxy_classes: %kernel.debug%
        auto_mapping: true
        mappings:
          loggable:
            type: annotation
            alias: Gedmo
            prefix: Gedmo\Loggable\Entity
            dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Loggable/Entity"

# Swiftmailer Configuration
swiftmailer:
    transport: %mailer_transport%
    host:      %mailer_host%
    username:  %mailer_user%
    password:  %mailer_password%
    spool:     { type: memory }

sonata_block:
    default_contexts: [cms]
    blocks:
        sonata.admin.block.admin_list:
            contexts:   [admin]

        #sonata.admin_doctrine_orm.block.audit:
        #    contexts:   [admin]

        sonata.block.service.text:
        sonata.block.service.rss:

        # Some specific block from the SonataMediaBundle
        #sonata.media.block.media:
        #sonata.media.block.gallery:
        #sonata.media.block.feature_media:

knp_menu:
    twig:  # use "twig: false" to disable the Twig extension and the TwigRenderer
        template: NSAceBundle:Menu:menu.html.twig
    templating: false # if true, enables the helper for PHP templates
    default_renderer: twig # The renderer to use, list is also available by default

sonata_admin:
    title:      NUVI Sentinel Network Administration
#    title_logo: /bundles/nobletsolutionsnedco/images/logo.png

sonata_doctrine_orm_admin:
  templates:
    form:
      - NSUtilBundle:Form:SonataDoctrineORM/form_admin_fields.html.twig

jms_translation:
  locales: [ en, es, pt, fr, hi ]
  configs:
    sentinel:
      output_dir: %kernel.root_dir%/../src/NS/SentinelBundle/Resources/translations        
      dirs: [ "%kernel.root_dir%/../src/NS/SentinelBundle" ]
      excluded_names: [ "*TestCase.php", "*Test.php" ]
      excluded_dirs: [ cache, data, logs ]
      output_format: xliff
  template: NSSentinelBundle:Translate:index.html.twig

knp_paginator:
  template:
    pagination: NSAceBundle:Form:pagination.html.twig
        
services:
  ns.form.types.autocomplete:
    class: NS\UtilBundle\Form\Types\Autocomplete
    arguments: [ "@doctrine.orm.entity_manager", "@router" ]
    tags:
      - { name: form.type, alias: ns_autocomplete }
  ns.ajax_autocompleter:
    class: NS\UtilBundle\Service\Ajax
    arguments: [ "@doctrine.orm.entity_manager", "@request", "@templating" ]
    scope: request
  twig.text_extension:
    class: Twig_Extensions_Extension_Text
    tags:
      - name: twig.extension
  extension.listener:
    class: NS\SentinelBundle\Listeners\DoctrineExtensionListener
    calls:
      - [ setContainer, [ @service_container ] ]
    tags:
      # loggable hooks user username if one is in security context
      - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
  gedmo.listener.loggable:
    class: Gedmo\Loggable\LoggableListener
    tags:
      - { name: doctrine.event_subscriber, connection: default }
    calls:
      - [ setAnnotationReader, [ @annotation_reader ] ]
