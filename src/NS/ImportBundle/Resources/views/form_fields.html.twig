{% block PreProcessorType_widget %}
    {% set prototype = '
        <tr class="queryBuilderEntry">
            <td>
                <a class="btn btn-primary btn-xs" data-toggle="modal" id="#__id___modal_trigger" data-target="#__id___modal"><i class="fa fa-pencil-square-o"></i> Modify Conditions</a>
            </td>
            <td>
                <input type="text" id="__id___value" />
                <div class="modal fade" id="__id___modal">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h4 class="modal-title">Edit Conditions</h4>
                            </div>
                            <div class="modal-body">
                                <div id="__id__" class="queryBuilder">
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" data-dismiss="modal">Continue</button>
                            </div>
                        </div>
                    </div>
                </div>
            </td>
            <td>
                <a class="btn btn-danger btn-xs" id="__id___delete"><i class="fa fa-trash"></i></a>
            </td>
        </tr>'
    %}
    {% set id = "queryBuilder_" ~ form.vars.id %}
    <div class="queryBuilderRow" id="queryBuilder_{{id}}_row">
        <input type="hidden" id="{{form.vars.id}}" name="{{form.vars.full_name}}" value="{{form.vars.value}}" />
        <table class="table table-condensed table-striped table-bordered dataTable" id="queryBuilder_{{id}}_data">
            <thead>
                <tr id="queryBuilder_{{id}}_header">
                    <th>Conditions</th>
                    <th>Output value</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr id="queryBuilder_{{id}}_placeholder">
                    <td colspan="3">None set</td>
                </tr>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3">
                        <a class="btn btn-success btn-xs pull-right" id="queryBuilder_{{id}}_add"><i class="fa fa-plus"></i> Add new conditions</a>
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
    <script type="text/javascript">
        $(function()
        {
            var prototype = '{{prototype|replace({"\n":' ', "\r":' '})|raw}}';
            var $row = $('#queryBuilder_{{id}}_row');
            var row_count = 0;
            var $contentBody = $('#queryBuilder_{{id}}_data tbody');
            var qb_conf = { //define QueryBuilder filters
                filters: [
                {% for field in csv_fields %}    
                {
                    id: '{{field}}',
                    label: '{{field|humanize}}',
                    type: 'string',
                    operators: [
                        {% for opr in operators %}
                            '{{ opr }}'{{ not loop.last ? ',' }}
                        {% endfor %}
                    ]
                }{{ not loop.last ? ',' }}
                {% endfor %}
                ]
            };
            
            function newrow($el, rules, output_value, event)
            {
                var conf = {}
                conf.filters = qb_conf.filters; //copy the default querybuilder config
                var newid = '{{id}}' + row_count++;
                var $nrow = $(prototype.replace(/__id__/g, newid)); //RegEx because .replace only does single instances
                $nrow.hide();
                
                if(rules) //add existing data if applicable
                    conf.rules = rules;
                    
                $el.append($nrow);
                $('#'+newid).queryBuilder(conf);
                
                if(output_value !== undefined)
                {
                    $('#'+newid+'_value').val(output_value);
                }
                
                $('#queryBuilder_{{id}}_placeholder').remove();
            
                $('#'+newid+'_delete').click(function()
                {
                    if(confirm('Are you sure you want to remove this condition?'))
                    {
                        $nrow.fadeOut(500, function()
                        {
                            $(this).remove();
                        });
                    }
                });
                
                $nrow.show();
                
                if(event)
                {
                    $('#'+newid+'_modal').modal('show');
                    console.log($('#'+newid+'_modal'));
                }
                
            }
            
            try
            {
                var v = $.parseJSON('{{form.vars.value|raw}}');
                $.each(v, function(index, conditional)
                {
                    newrow($contentBody, conditional.conditions.rules, conditional.output_value);
                });
            }
            catch(err)
            {}
            
            $('#queryBuilder_{{id}}_add').click(function(event)
            {
                newrow($contentBody, null, null, event);
            });
            
            $row.closest('form').submit(function()
            {
                $form = $(this);
                var formData = [];
                $row.find('.queryBuilder').each(function()
                {
                    $qb = $(this);
                    var d = {'conditions':$qb.queryBuilder('getRules')};
                    d.output_value = $('#' + $qb.attr('id') + '_value').val();
                    
                    formData.push(d);
                });
                
                $('#{{form.vars.id}}').val(JSON.stringify(formData));
            });
        });
    </script>
{% endblock %}
