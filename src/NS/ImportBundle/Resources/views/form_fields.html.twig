{% block PreProcessorType_widget %}
    {% set prototype = '<div class="formRow queryBuilderEntry"><a class="btn btn-danger btn-xs" id="__id___delete"><i class="fa fa-trash"></i></a>
            If:
            <div id="__id__" class="queryBuilder">

            </div>
            Then:
            <input type="text" id="__id___value" />
        </div>'
    %}
    {% set id = "queryBuilder_" ~ form.vars.id %}
    <div class="queryBuilderRow" id="queryBuilder_{{id}}_row">
        <input type="hidden" id="{{form.vars.id}}" name="{{form.vars.full_name}}" value="{{form.vars.value}}" />
        <a class="btn btn-success btn-xs" id="queryBuilder_{{id}}_add"><i class="fa fa-plus"></i></a>
    </div>
    <script type="text/javascript">
        $(function()
        {
            var prototype = '{{prototype|replace({"\n":' ', "\r":' '})|raw}}';
            var $row = $('#queryBuilder_{{id}}_row');
            var row_count = 0;
            var qb_conf = { //define QueryBuilder filters
                filters: [
                {% for field in csv_fields %}    
                {
                    id: '{{field}}',
                    label: '{{field|humanize}}',
                    type: 'string',
    //                operators: ['equal', 'not_equal', 'in', 'not_in', 'is_null', 'is_not_null']
                }{{ not loop.last ? ',' }}
                {% endfor %}
                ]
            };
            
            function newrow($el, rules, output_value)
            {
                var conf = {}
                conf.filters = qb_conf.filters; //copy the default querybuilder config
                var newid = '{{id}}' + row_count++;
                var $nrow = $(prototype.replace(/__id__/g, newid)); //RegEx because .replace only does single instances
                
                if(rules) //add existing data if applicable
                    conf.rules = rules;
                    
                $el.before($nrow);
                $('#'+newid).queryBuilder(conf);
                
                if(output_value !== undefined)
                {
                    $('#'+newid+'_value').val(output_value);
                }
                
            
                $('#'+newid+'_delete').click(function()
                {
                    if(confirm('Are you sure you want to remove this condition?'))
                    {
                        $nrow.fadeOut(500, function()
                        {
                            $(this).remove();
                        });
                    }
                });
            }
            
            try
            {
                var v = $.parseJSON('{{form.vars.value|raw}}');
                $.each(v, function(index, conditional)
                {
                    newrow($('#queryBuilder_{{id}}_add'), conditional.conditions.rules, conditional.output_value);
                });
            }
            catch(err)
            {}
            
            $('#queryBuilder_{{id}}_add').click(function()
            {
                newrow($(this));
            });
            
            $row.closest('form').submit(function()
            {
                $form = $(this);
                var formData = [];
                $row.find('.queryBuilder').each(function()
                {
                    $qb = $(this);
                    var d = {'conditions':$qb.queryBuilder('getRules')};
                    d.output_value = $('#' + $qb.attr('id') + '_value').val();
                    
                    formData.push(d);
                });
                
                $('#{{form.vars.id}}').val(JSON.stringify(formData));
            });
        });
    </script>
{% endblock %}
