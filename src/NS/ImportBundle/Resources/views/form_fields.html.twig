{% block PreProcessorType_widget %}
    {% set prototype = '
        <tr class="queryBuilderEntry" id="queryBuilderEntry___id__">
            <td>
                <span class="conditionString" id="__id___conditionString"></span>
                <div class="modal fade queryModal" id="__id___modal">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title">Edit Conditions</h4>
                            </div>
                            <div class="modal-body">
                                <input type="hidden" class="valueHolder" id="__id___valueHolder" />
                                <div id="__id__" class="queryBuilder">
                                </div>
                                <hr />
                                <div class="form-group">
                                    <label class="col-sm-3 control-label">Output Value</label>
                                    <div class="col-sm-9">
                                        <input type="text" class="outputValue" id="__id___outputValue" />
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer clearfix">
                                <button type="button" class="btn btn-warning pull-left" data-dismiss="modal"><i class="fa fa-undo"></i> Cancel</button>
                                <button type="button" class="btn btn-primary pull-right" data-dismiss="modal"><i class="fa fa-arrow-right"></i> Continue</button>
                            </div>
                        </div>
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td>
                <a class="btn btn-primary btn-xs" data-toggle="modal" id="#__id___modal_trigger" data-target="#__id___modal"><i class="fa fa-pencil-square-o"></i> Modify</a>
                <a class="btn btn-danger btn-xs" id="__id___delete"><i class="fa fa-trash"></i></a>
            </td>
        </tr>'
    %}
    {% set id = "queryBuilder_" ~ form.vars.id %}
    <div class="queryBuilderRow" id="queryBuilder_{{id}}_row">
        <input type="hidden" id="{{form.vars.id}}" name="{{form.vars.full_name}}" value="{{form.vars.value}}" />
        <table class="table table-condensed table-striped table-bordered dataTable" id="queryBuilder_{{id}}_data">
            <thead>
                <tr id="queryBuilder_{{id}}_header">
                    <th>Conditions</th>
                </tr>
            </thead>
            <tbody>
                <tr id="queryBuilder_{{id}}_placeholder">
                    <td>None set</td>
                </tr>
            </tbody>
            <tfoot>
                <tr>
                    <td>
                        <a class="btn btn-success btn-xs pull-right" id="queryBuilder_{{id}}_add"><i class="fa fa-plus"></i> Add new conditions</a>
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
    <script type="text/javascript">
        $(function() //Closure so the vars we define here are scoped only to this instance of the formType
        {
            //Scrape the imported column names.  Only do this once per page
            if(window.querybuilderFields === undefined)
            {
                window.querybuilderFields = [];
                window.querybuilderCount = 0;
                
                //define default QueryBuilder filters
                $('input[data-querybuilder=columnName]').each(function()
                {
                    var v = $(this).val();
                    var qf = {
                        id: v,
                        label: v,
                        type: 'string',
                        operators: [
                            {% for opr in operators %}
                                '{{ opr }}'{{ not loop.last ? ',' }}
                            {% endfor %}
                        ]
                    }
                    window.querybuilderFields.push(qf);
                });

                window.commitModal = function(id, $row)
                {
                    var builder = $('#'+id);

                    if(!builder.queryBuilder('validate'))
                    {
                        return false;
                    }

                    var qbRules = builder.queryBuilder('getRules');

                    $('#'+id+'_valueHolder').val(JSON.stringify(qbRules));

                    window.readableConditions($row);

                    return true;
                };

                window.readableConditions = function($row)
                {
                    var conditions = window.formatData($row);
                    var out = {};

                    jQuery.ajax(
                    '{{ path('adminConditionAjaxConverter') }}',
                    {
                        'type': 'post',
                        'data': {
                            'conditions': JSON.stringify(conditions)
                        },
                        'success': function(data, status, jqXHR)
                        {
                            window.displayConditions(data);
                        }
                    });
                }

                window.displayConditions = function(conditions)
                {
                    jQuery.each(conditions, function(key, value)
                    {
                        $('#'+key+' span.conditionString').html(value);
                    });
                }

                window.formatData = function($row)
                {
                    var formData = {};

                    $row.find('.queryBuilderEntry').each(function()
                    {
                        var id = this.id;
                        //read the ruleset and output value out of the value holder and output value fields, respectively
                        $vh = $(this).find('input.valueHolder');
                        $ov = $(this).find('input.outputValue');


                        //Format output JSON
                        try
                        {
                            var d = {'conditions':JSON.parse($vh.val())};
                            d.output_value = $ov.val();
                        }
                        catch(e)
                        {
                            var d = {}
                        }

                        //add the final rules to the form data
                        formData[id] = d;
                    });

                    return formData;
                }
            }
            
            //Setup
            var $dataField = $('#{{form.vars.id}}');
            var $nameField = $('#' + $dataField.attr('id').replace('preProcessor', 'name'));
            var prototype = '{{prototype|replace({"\n":' ', "\r":' '})|raw}}';
            var $row = $('#queryBuilder_{{id}}_row');
            var row_count = 0;
            var $contentBody = $('#queryBuilder_{{id}}_data tbody');
            
            var qb_conf = { //copy default QueryBuilder filters
                filters: window.querybuilderFields
            };
            
            function newrow($el, rules, output_value, event)
            {
                var conf = {}
                conf.filters = qb_conf.filters; //copy the default querybuilder config
                var newid = '{{id}}' + row_count++;
                var $nrow = $(prototype.replace(/__id__/g, newid)); //RegEx because .replace only does single instances
//                var $nrow = $(prototype.replace(/__condition__/g, newid));
                $nrow.hide();
                
                if(rules) //add existing data if applicable
                    conf.rules = rules;
                else
                {
                    conf.rules = [{
                        id: $nameField.val()
                    }];
                }

                $el.append($nrow); //add the new row to the table
                
                $('#'+newid+'_valueHolder').val(JSON.stringify(conf.rules)); //Copy the current ruleset into the holder field
                
                //Assign the existing output value, if defined in existing data
                if(output_value !== undefined)
                {
                    $('#'+newid+'_outputValue').val(output_value);
                }
                
                //render the querybuilder when we open the modal
                $('#'+newid+'_modal').on('show.bs.modal', function()
                {
                    try
                    {
                        // try to parse the ruleset out of the holder field
                        var r = JSON.parse($('#'+newid+'_valueHolder').val());

                        if(jQuery.isEmptyObject(r))
                        {
                            throw "Empty JSON object";
                        }

                        conf.rules = r;
                    }
                    catch(e)
                    {
                        //use the existing rules
                    }
                    
                    $('#'+newid).queryBuilder(conf);//init the queryBuilder
                
                    //set the default field name to whatever column we're working with
                    $('#'+newid).on('afterCreateRuleFilters.queryBuilder', function(e, rule) {
                        rule.filter = $('#'+newid).queryBuilder('getFilterById', $nameField.val());
                    });
                });

                $('#'+newid+'_modal').on('shown.bs.modal', function()
                {
                    $modal = $(this);

                    $modal.find('input:visible').first().focus();
                });
                
                //destroy the querybuilder when we close the modal
                $('#'+newid+'_modal').on('hidden.bs.modal', function()
                {
                    $('#'+newid).queryBuilder('destroy');
                });

                $('#'+newid+'_modal').on('keyup keypress', function(e)
                {
                    var $modal = $(this);
                    if (e.keycode == 13 || e.which == 13) //Enter key
                    {
                        e.preventDefault();
                        $modal.find('input:focus').blur();

                        if(window.commitModal(newid, $row)) //if we pass validation
                            $modal.modal('hide');

                        return false;
                    }
                });
                //if modal is closed with the "continue" button, copy the ruleset from the querybuilder to the holder field before we destoy the querybuilder
                $('#'+newid+'_modal .btn-primary').on('click', function(event)
                {
                    if(!window.commitModal(newid, $row)) //If we fail validation
                    {
                        event.preventDefault();
                        event.stopPropagation();
                        return false;
                    }
                });
                
                $('#queryBuilder_{{id}}_placeholder').remove(); //Remove the "None set" message
            
                //initialize the delete button
                $('#'+newid+'_delete').click(function() 
                {
                    if(confirm('Are you sure you want to remove this condition?'))
                    {
                        $nrow.fadeOut(500, function()
                        {
                            $(this).remove();
                        });
                    }
                });
                
                $nrow.show(); //Show the new row
                
                if(event) //Open the modal window that contains the query builder
                {
                    $('#'+newid+'_modal').modal('show');
                }
            }
            
            //Read the existing data out of the form
            try 
            {
                //Prepopulate with existing data
                var v = $.parseJSON('{{form.vars.value|raw}}');
                $.each(v, function(index, conditional)
                {
                    newrow($contentBody, conditional.conditions, conditional.output_value);
                });
            }
            catch(err)//Ignore if badly-formed JSON
            {}
            
            //Initialize Add New button
            $('#queryBuilder_{{id}}_add').click(function(event)
            {
                newrow($contentBody, null, null, event);
            });

            window.querybuilderCount++;

            if(window.querybuilderCount == window.querybuilderFields.length) //Only do this once all the rows have been processed
            {
                window.readableConditions($('body'));
            }

             //Save the querybuilder data to the form when it's submitted
            $row.closest('form').submit(function()
            {
                $dataField.val(JSON.stringify(window.formatData($row)));
            });
        });
    </script>
{% endblock %}
