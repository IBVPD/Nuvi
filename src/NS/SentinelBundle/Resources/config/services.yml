parameters:
#    ns_sentinel.example.class: NS\SentinelBundle\Example

services:
    ns.sentinel.menu_builder:
      class: NS\SentinelBundle\Menu\Builder
      arguments: [ "@knp_menu.factory", "@security.context" ]
    ns.sentinel.menu.user:
      class: Knp\Menu\MenuItem # the service definition requires setting the class
      factory_service: ns.sentinel.menu_builder
      factory_method: userMenu
      arguments: ["@request"]
      scope: request # needed as we have the request as a dependency here
      tags:
        - { name: knp_menu.menu, alias: user } # The alias is what is used to retrieve the menu    
    ns.sentinel.user_provider:
      class: NS\SentinelBundle\Security\UserProvider
      arguments: [ "@doctrine.orm.entity_manager" ]
    ns.sentinel.form.type.site:
      class: NS\SentinelBundle\Form\Type\SiteType
      arguments: [ "@doctrine.orm.entity_manager", "@session" ]
      tags:
        - { name: form.type, alias: site_select }
    ns.sentinel.form.type.meningitis:
      class: NS\SentinelBundle\Form\MeningitisType
      arguments: [ "@security.context", "@session", "@doctrine.orm.entity_manager" ]
      tags:
        - { name: form.type, alias: meningitis }
    ns.sentinel.form.type.gavi:
      class: NS\SentinelBundle\Form\Types\GAVIEligible
      tags:
        - { name: form.type, alias: GAVIEligible }
    ns.sentinel.form.type.triple_choice:
      class: NS\SentinelBundle\Form\Type\TripleChoice
      tags:
        - { name: form.type, alias: triple_choice }
    ns.sentinel.form.type.diagnosis:
      class: NS\SentinelBundle\Form\Type\Diagnosis
      tags:
        - { name: form.type, alias: Diagnosis }
    ns.sentinel.form.type.dischargeOutcome:
      class: NS\SentinelBundle\Form\Type\DischargeOutcome
      tags:
        - { name: form.type, alias: DischargeOutcome }
    ns.sentinel.form.type.doses:
      class: NS\SentinelBundle\Form\Type\Doses
      tags:
        - { name: form.type, alias: Doses }
    ns.sentinel.form.type.gender:
      class: NS\SentinelBundle\Form\Type\Gender
      tags:
        - { name: form.type, alias: Gender }        
    ns.sentinel.form.type.cxr_result:
      class: NS\SentinelBundle\Form\Type\CXRResult
      tags:
        - { name: form.type, alias: CXRResult }
    ns.sentinel.form.type.CSFAppearance:
      class: NS\SentinelBundle\Form\Type\CSFAppearance
      tags:
        - { name: form.type, alias: CSFAppearance }
    ns.sentinel.form.type.role:
        class: NS\SentinelBundle\Form\Type\Role
        tags:
          - { name: form.type, alias: role }
    ns_sentinel.admin.region:
        class: NS\SentinelBundle\Admin\RegionAdmin
        arguments: [~, NS\SentinelBundle\Entity\Region, SonataAdminBundle:CRUD]
        tags:
            - {name: sonata.admin, manager_type: orm, group: Administration, label: Region}

    ns_sentinel.admin.country:
        class: NS\SentinelBundle\Admin\CountryAdmin
        arguments: [~, NS\SentinelBundle\Entity\Country, SonataAdminBundle:CRUD]
        tags:
            - {name: sonata.admin, manager_type: orm, group: Administration, label: Country}

    ns_sentinel.admin.site:
        class: NS\SentinelBundle\Admin\SiteAdmin
        arguments: [~, NS\SentinelBundle\Entity\Site, SonataAdminBundle:CRUD]
        tags:
            - {name: sonata.admin, manager_type: orm, group: Administration, label: Site}

    ns_sentinel.admin.user:
        class: NS\SentinelBundle\Admin\UserAdmin
        arguments: [~, NS\SentinelBundle\Entity\User, SonataAdminBundle:CRUD]
        calls:
            - [ setEncoderFactory, [ "@security.encoder_factory" ] ]
        tags:
            - {name: sonata.admin, manager_type: orm, group: Users, label: User}

    ns_sentinel.admin.acl:
        class: NS\SentinelBundle\Admin\ACLAdmin
        arguments: [~, NS\SentinelBundle\Entity\ACL, SonataAdminBundle:CRUD]
        tags:
            - {name: sonata.admin, manager_type: orm, group: Administration, label: ACL, show_in_dashboard: false}
