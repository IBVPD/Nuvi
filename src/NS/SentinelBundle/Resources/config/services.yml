parameters:
#    ns_sentinel.example.class: NS\SentinelBundle\Example

services:
    ns.sentinel.form.rota.report_filter:
      class: NS\SentinelBundle\Form\Rota\ReportFilterType
      arguments: [ @security.context, @ns.security.acl_converter ] 
      tags:
        - { name: form.type, alias: RotaVirusReportFilterType }

    ns.sentinel.services.report:
      class: NS\SentinelBundle\Services\Report
      arguments: [@sonata.admin.exporter, @lexik_form_filter.query_builder_updater, @ns.model_manager, @router ]

    ns.sentinel.form.ibd.field_population_filter:
      class: NS\SentinelBundle\Form\IBD\FieldPopulationReportFilterType
      arguments: [ @security.context, @ns.security.acl_converter ] 
      tags:
        - { name: form.type, alias: IBDFieldPopulationFilterType }

    ns.sentinel.form.ibd.report_filter:
      class: NS\SentinelBundle\Form\IBD\ReportFilterType
      arguments: [ @security.context, @ns.security.acl_converter ] 
      tags:
        - { name: form.type, alias: IBDReportFilterType }
    
    ns.sentinel.form.filters.base_report_filter:
      class: NS\SentinelBundle\Form\Filters\BaseReportFilterType
      arguments: [ @security.context, @ns.security.acl_converter ] 
      tags:
        - { name: form.type, alias: BaseReportFilterType }

    ns.sentinel.form.type.ibdintensesupport:
      class: NS\SentinelBundle\Form\Types\IBDIntenseSupport
      tags:
        - { name: form.type, alias: IBDIntenseSupport }

    ns.sentinel.form.type.surveillanceconducted:
      class: NS\SentinelBundle\Form\Types\SurveillanceConducted
      tags:
        - { name: form.type, alias: SurveillanceConducted }

    ns.sentinel.services.homepage:
        class: NS\SentinelBundle\Services\Homepage
        arguments: [ @security.context, @router ]

    ns.sentinel.services.login_listener:
        class: NS\SentinelBundle\Services\LoginListener
        arguments: [ @ns.sentinel.services.homepage, @event_dispatcher ]
        tags:
            - { name: kernel.event_listener, event: security.interactive_login, method: onSecurityInteractiveLogin }

    ns.sentinel.form.type.otherspecimen:
      class: NS\SentinelBundle\Form\Types\OtherSpecimen
      tags:
        - { name: form.type, alias: OtherSpecimen }

    ns.sentinel.converter.volume:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\Volume ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.spnSerotype:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\SpnSerotype ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.serotypeIdentifier:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\SerotypeIdentifier ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.rotavirusVaccinationReceived:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\RotavirusVaccinationReceived ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.VaccinationReceived:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\VaccinationReceived ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.threeDoses:
      class: NS\SentinelBundle\Converter\Doses
      arguments: [ NS\SentinelBundle\Form\Types\ThreeDoses ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.fourDoses:
      class: NS\SentinelBundle\Converter\Doses
      arguments: [ NS\SentinelBundle\Form\Types\FourDoses ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.rotavirusDischargeOutcome:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\RotavirusDischargeOutcome ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.rehydration:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\Rehydration ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.pathogenIdentifier:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\PathogenIdentifier ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.pcvType:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\PCVType ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.pcrResult:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\PCRResult ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.otherSpecimen:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\OtherSpecimen ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.nmSerogroup:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\NmSerogroup ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.MeningVaccinationType:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\MeningitisVaccinationType ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.meningitisVaccinationReceived:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\MeningitisVaccinationReceived ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.latResult:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\LatResult ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.isolateType:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\IsolateType ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.ibdCaseResult:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\IBDCaseResult ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.hiSerotype:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\HiSerotype ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.gramStainOrganism:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\GramStainOrganism ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.gramStain:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\GramStain ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.genotypeResultP:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\GenotypeResultP ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.genotypeResultG:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\GenotypeResultG ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.elisaKit:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\ElisaKit ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.elisaResult:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\ElisaResult ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.dischargeOutcome:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\DischargeOutcome ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.dischargeClassification:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\DischargeClassification ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.diagnosis:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\Diagnosis ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.dehydration:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\Dehydration ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.cultureResult:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\CultureResult ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.caseStatus:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\CaseStatus ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.cxrResult:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\CXRResult ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.cxrAdditionalResult:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\CXRAdditionalResult ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.binaxResult:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\BinaxResult ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.csfAppearance:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\CSFAppearance ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.gender:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\Gender ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.diagnosis:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\Diagnosis ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.triple_choice:
      class: NS\SentinelBundle\Converter\ArrayChoice
      arguments: [ NS\SentinelBundle\Form\Types\TripleChoice ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.converter.site:
      class: NS\SentinelBundle\Converter\SiteConverter
      arguments: [ @ns.model_manager ]
      tags:
        - { name: ns_import.converter }

    ns.sentinel.form.type.cultureresult:
      class: NS\SentinelBundle\Form\Types\CultureResult
      tags:
        - { name: form.type, alias: CultureResult }

    ns.sentinel.form.type.rotavirusdischargeoutcome:
      class: NS\SentinelBundle\Form\Types\RotavirusDischargeOutcome
      tags:
        - { name: form.type, alias: RotavirusDischargeOutcome }

    ns.sentinel.form.type.pcvtype:
      class: NS\SentinelBundle\Form\Types\PCVType
      tags:
        - { name: form.type, alias: PCVType }

    ns.sentinel.form.type.cxradditionalresult:
      class: NS\SentinelBundle\Form\Types\CXRAdditionalResult
      tags:
        - { name: form.type, alias: CXRAdditionalResult }

    ns.sentinel.form.type.dischargediagnosis:
      class: NS\SentinelBundle\Form\Types\DischargeDiagnosis
      tags:
        - { name: form.type, alias: DischargeDiagnosis }

    ns.sentinel.form.type.threedoses:
      class: NS\SentinelBundle\Form\Types\ThreeDoses
      tags:
        - { name: form.type, alias: ThreeDoses }

    ns.sentinel.form.ibd_outcome:
      class: NS\SentinelBundle\Form\IBD\OutcomeType
      tags:
        - { name: form.type, alias: ibd_outcome }

    ns.sentinel.form.rotavirus_outcome:
      class: NS\SentinelBundle\Form\Rota\OutcomeType
      tags:
        - { name: form.type, alias: rotavirus_outcome }

    ns.sentinel.locale_listener:
      class: NS\SentinelBundle\Locale\Login
      arguments: [ @security.context, @service_container, %kernel.default_locale% ]
      tags:
        - { name: kernel.event_subscriber }
        - { name: kernel.event_listener, event: security.authentication.success, method: onLogin }
        - { name: kernel.event_listener, event: security.switch_user, method: switchUser }

    ns.sentinel.form.type.spnserotype:
      class: NS\SentinelBundle\Form\Types\SpnSerotype
      tags:
        - { name: form.type, alias: SpnSerotype }
    
    ns.sentinel.form.type.hiserotype:
      class: NS\SentinelBundle\Form\Types\HiSerotype
      tags:
        - { name: form.type, alias: HiSerotype }

    ns.sentinel.form.type.nmserogroup:
      class: NS\SentinelBundle\Form\Types\NmSerogroup
      tags:
        - { name: form.type, alias: NmSerogroup }

    ns.sentinel.form.type.genotyperesultgspecify:
      class: NS\SentinelBundle\Form\Types\GenotypeResultGSpecify
      tags:
        - { name: form.type, alias: GenotypeResultGSpecify }

    ns.sentinel.form.type.genotyperesultg:
      class: NS\SentinelBundle\Form\Types\GenotypeResultG
      tags:
        - { name: form.type, alias: GenotypeResultG }

    ns.sentinel.form.type.genotyperesultpspecify:
      class: NS\SentinelBundle\Form\Types\GenotypeResultPSpecify
      tags:
        - { name: form.type, alias: GenotypeResultPSpecify }

    ns.sentinel.form.type.genotyperesultp:
      class: NS\SentinelBundle\Form\Types\GenotypeResultP
      tags:
        - { name: form.type, alias: GenotypeResultP }

    ns.sentinel.form.filters.lab_filter:
      class: NS\SentinelBundle\Form\Filters\LabFilterType
      tags:
        - { name: form.type, alias: lab_filter }

    ns.sentinel.twig.case_actions:
      class: NS\SentinelBundle\Twig\CaseActions
      arguments: [ @security.context, @translator, @router ]
      tags:
        - { name: twig.extension, alias: twig_case_actions }

    ns.sentinel.twig.case_templates:
      class: NS\SentinelBundle\Twig\CaseTemplates
      arguments: [ @security.context, @twig ]
      tags:
        - { name: twig.extension, alias: twig_case_templates }

    ns.sentinel.twig.case_status:
      class: NS\SentinelBundle\Twig\CaseStatus
      tags:
        - { name: twig.extension, alias: twig_case_status }

    ns.sentinel.form.filter.base:
      class: NS\SentinelBundle\Form\Filters\BaseObject
      tags:
        - { name: form.type, alias: filter_object }

    ns.sentinel.form.filter.country:
      class: NS\SentinelBundle\Form\Filters\Country
      arguments: [ @ns.model_manager, "NSSentinelBundle:Country" ]
      tags:
        - { name: form.type, alias: country }

    ns.sentinel.form.filter.region:
      class: NS\SentinelBundle\Form\Filters\Region
      arguments: [ @ns.model_manager, "NSSentinelBundle:Region" ]
      tags:
        - { name: form.type, alias: region }

    ns.sentinel.form.filter.site:
      class: NS\SentinelBundle\Form\Filters\Site
      arguments: [ @ns.model_manager, "NSSentinelBundle:Site" ]
      tags:
        - { name: form.type, alias: site }

    ns.sentinel.filter.listener:
      class: NS\SentinelBundle\Filter\Listener
      tags:
        - { name: kernel.event_subscriber }

    ns.sentinel.filter.case_status_listener:
      class: NS\SentinelBundle\Filter\CaseStatusListener
      tags:
        - { name: kernel.event_subscriber } 

    ns.sentinel.form.type.createroles:
      class: NS\SentinelBundle\Form\Types\CreateRoles
      calls:
        - [ setSecurityContext, [ @security.context ] ]
      tags:
        - { name: form.type, alias: CreateRoles }

    ns.sentinel.form.create:
      class: NS\SentinelBundle\Form\CreateType
      arguments: [ "@ns.sentinel.sites", "@ns.model_manager" ]
      tags:
        - { name: form.type, alias: create_case }

    ns.sentinel.sites:
      class: NS\SentinelBundle\Services\SerializedSites
      arguments: [ "@session", "@ns.model_manager" ]

    ns.sentinel.form.type.casestatus:
      class: NS\SentinelBundle\Form\Types\CaseStatus
      tags:
        - { name: form.type, alias: CaseStatus }

    ns.sentinel.form.type.dischargeoutcome:
      class: NS\SentinelBundle\Form\Types\DischargeOutcome
      tags:
        - { name: form.type, alias: DischargeOutcome }

    ns.sentinel.form.type.gramstainorganism:
      class: NS\SentinelBundle\Form\Types\GramStainOrganism
      tags:
        - { name: form.type, alias: GramStainOrganism }

    ns.sentinel.form.type.gramstain:
      class: NS\SentinelBundle\Form\Types\GramStain
      tags:
        - { name: form.type, alias: GramStain }

    ns.sentinel.form.type.meningitisvaccinationtype:
      class: NS\SentinelBundle\Form\Types\MeningitisVaccinationType
      tags:
        - { name: form.type, alias: MeningitisVaccinationType }

    ns.sentinel.form.type.vaccinationreceived:
      class: NS\SentinelBundle\Form\Types\VaccinationReceived
      tags:
        - { name: form.type, alias: VaccinationReceived }

    ns.sentinel.form.type.dischargeclassification:
      class: NS\SentinelBundle\Form\Types\DischargeClassification
      tags:
        - { name: form.type, alias: DischargeClassification }

    ns.sentinel.form.type.ibdcaseresult:
      class: NSSentinelBundle\Form\Types\IBDCaseResult
      tags:
        - { name: form.type, alias: IBDCaseResult }

    ns.sentinel.form.type.elisakit:
      class: NS\SentinelBundle\Form\Types\ElisaKit
      tags:
        - { name: form.type, alias: ElisaKit }

    ns.sentinel.form.type.elisaresult:
      class: NS\SentinelBundle\Form\Types\ElisaResult
      tags:
        - { name: form.type, alias: ElisaResult }

    ns.sentinel.form.type.rotavirusvaccinationtype:
      class: NS\SentinelBundle\Form\Types\RotavirusVaccinationType
      tags:
        - { name: form.type, alias: RotavirusVaccinationType }

    ns.sentinel.form.type.rotavirusvaccinationreceived:
      class: NS\SentinelBundle\Form\Types\RotavirusVaccinationReceived
      tags:
        - { name: form.type, alias: RotavirusVaccinationReceived }

    ns.sentinel.form.type.dehydration:
      class: NS\SentinelBundle\Form\Types\Dehydration
      tags:
        - { name: form.type, alias: Dehydration }

    ns.sentinel.form.type.rehydration:
      class: NS\SentinelBundle\Form\Types\Rehydration
      tags:
        - { name: form.type, alias: Rehydration }

    ns.sentinel.form.result_per_page:
      class: NS\SentinelBundle\Form\ResultPerPage
      arguments: [ "ibdIndex" ]
      tags:
        - { name: form.type, alias: results_per_page }

    ns.sentinel.result_per_page:
      class: NS\SentinelBundle\Listeners\ResultPerPage
      arguments: [ "@router","@form.factory" ]
      tags:
        - { name: kernel.event_listener, event: kernel.request, method: onRequest }

    ns.sentinel.base.filter:
      class: NS\SentinelBundle\Form\BaseFilter
      arguments: [ "@security.context" ]
      tags:
        - { name: form.type, alias: base_filter_form }

    ns.sentinel.rotavirus.filter:
      class: NS\SentinelBundle\Form\Rota\FilterType
      tags:
        - { name: form.type, alias: rotavirus_filter_form }

    ns.sentinel.meningitis.filter:
      class: NS\SentinelBundle\Form\IBD\FilterType
      tags:
        - { name: form.type, alias: ibd_filter_form }

    ns.sentinel.menu_builder:
      class: NS\SentinelBundle\Menu\Builder
      arguments: [ "@knp_menu.factory", "@security.context" ]

    ns.sentinel.menu.user:
      class: Knp\Menu\MenuItem # the service definition requires setting the class
      factory_service: ns.sentinel.menu_builder
      factory_method: user
      arguments: ["@request"]
      scope: request # needed as we have the request as a dependency here
      tags:
        - { name: knp_menu.menu, alias: user } # The alias is what is used to retrieve the menu  

    ns.sentinel.menu.sidebar:
      class: Knp\Menu\MenuItem # the service definition requires setting the class
      factory_service: ns.sentinel.menu_builder
      factory_method: sidebar
      arguments: ["@request"]
      scope: request # needed as we have the request as a dependency here
      tags:
        - { name: knp_menu.menu, alias: sidebar } # The alias is what is used to retrieve the menu    

    ns.sentinel.user_provider:
      class: NS\SentinelBundle\Security\UserProvider
      arguments: [ "@doctrine.orm.entity_manager" ]

    ns.sentinel.form.type.ibd_base:
      class: NS\SentinelBundle\Form\IBD\BaseLabType
      tags:
        - { name: form.type, alias: ibd_base_lab }

    ns.sentinel.form.type.ibd_nl:
      class: NS\SentinelBundle\Form\IBD\NationalLabType
      tags:
        - { name: form.type, alias: ibd_nationallab }

    ns.sentinel.form.type.ibd_rrl:
      class: NS\SentinelBundle\Form\IBD\ReferenceLabType
      tags:
        - { name: form.type, alias: ibd_referencelab }

    ns.sentinel.form.type.ibd_sitelab:
      class: NS\SentinelBundle\Form\IBD\SiteLabType
      arguments: [ "@ns.sentinel.sites" ]
      tags:
        - { name: form.type, alias: ibd_lab }

    ns.sentinel.form.type.ibd:
      class: NS\SentinelBundle\Form\IBD\CaseType
      arguments: [ "@ns.sentinel.sites","@ns.model_manager" ]
      tags:
        - { name: form.type, alias: ibd }

    ns.sentinel.form.type.rota_base:
      class: NS\SentinelBundle\Form\Rota\BaseLabType
      tags:
        - { name: form.type, alias: rotavirus_base_lab }

    ns.sentinel.form.type.rota_nl:
      class: NS\SentinelBundle\Form\Rota\NationalLabType
      tags:
        - { name: form.type, alias: rotavirus_nationallab }

    ns.sentinel.form.type.rota_rrl:
      class: NS\SentinelBundle\Form\Rota\ReferenceLabType
      tags:
        - { name: form.type, alias: rotavirus_referencelab }

    ns.sentinel.form.type.rotavirus_sitelab:
      class: NS\SentinelBundle\Form\Rota\SiteLabType
      arguments: [ "@ns.sentinel.sites" ]      
      tags:
        - { name: form.type, alias: rotavirus_lab }

    ns.sentinel.form.type.rotavirus:
      class: NS\SentinelBundle\Form\Rota\CaseType
      arguments: [ "@ns.sentinel.sites", "@ns.model_manager" ]
      tags:
        - { name: form.type, alias: rotavirus }

    ns.sentinel.form.type.pathogenidentifier:
      class: NS\SentinelBundle\Form\Types\PathogenIdentifier
      tags:
        - { name: form.type, alias: PathogenIdentifier }

    ns.sentinel.form.type.serotypeidentifier:
      class: NS\SentinelBundle\Form\Types\SerotypeIdentifier
      tags:
        - { name: form.type, alias: SerotypeIdentifier }

    ns.sentinel.form.type.volume:
      class: NS\SentinelBundle\Form\Types\Volume
      tags:
        - { name: form.type, alias: Volume }

    ns.sentinel.form.type.sampletype:
      class: NS\SentinelBundle\Form\Types\SampleType
      tags:
        - { name: form.type, alias: SampleType }

    ns.sentinel.form.type.isolatetype:
      class: NS\SentinelBundle\Form\Types\IsolateType
      tags:
        - { name: form.type, alias: IsolateType }

    ns.sentinel.form.type.latresult:
      class: NS\SentinelBundle\Form\Types\LatResult
      tags:
        - { name: form.type, alias: LatResult }

    ns.sentinel.form.type.binaxresult:
      class: NS\SentinelBundle\Form\Types\BinaxResult
      tags:
        - { name: form.type, alias: BinaxResult }

    ns.sentinel.form.type.pcrresult:
      class: NS\SentinelBundle\Form\Types\PCRResult
      tags:
        - { name: form.type, alias: PCRResult }

    ns.sentinel.form.type.alternatetriplechoice:
      class: NS\SentinelBundle\Form\Types\AlternateTripleChoice
      tags:
        - { name: form.type, alias: AlternateTripleChoice }

    ns.sentinel.form.type.triple_choice:
      class: NS\SentinelBundle\Form\Types\TripleChoice
      tags:
        - { name: form.type, alias: TripleChoice }

    ns.sentinel.form.type.diagnosis:
      class: NS\SentinelBundle\Form\Types\Diagnosis
      tags:
        - { name: form.type, alias: Diagnosis }

    ns.sentinel.form.type.dischargeClassification:
      class: NS\SentinelBundle\Form\Types\DischargeClassification
      tags:
        - { name: form.type, alias: DischargeClassification }

    ns.sentinel.form.type.dischargeOutcome:
      class: NS\SentinelBundle\Form\Types\DischargeOutcome
      tags:
        - { name: form.type, alias: DischargeOutcome }

    ns.sentinel.form.type.fourdoses:
      class: NS\SentinelBundle\Form\Types\FourDoses
      tags:
        - { name: form.type, alias: FourDoses }

    ns.sentinel.form.type.gender:
      class: NS\SentinelBundle\Form\Types\Gender
      tags:
        - { name: form.type, alias: Gender }

    ns.sentinel.form.type.cxr_result:
      class: NS\SentinelBundle\Form\Types\CXRResult
      tags:
        - { name: form.type, alias: CXRResult }

    ns.sentinel.form.type.CSFAppearance:
      class: NS\SentinelBundle\Form\Types\CSFAppearance
      tags:
        - { name: form.type, alias: CSFAppearance }

    ns.sentinel.form.type.role:
        class: NS\SentinelBundle\Form\Types\Role
        calls:
          - [ setSecurityContext, [ "@security.context" ] ]
        tags:
          - { name: form.type, alias: role }

    ns_sentinel.admin.region:
        class: NS\SentinelBundle\Admin\RegionAdmin
        arguments: [~, NS\SentinelBundle\Entity\Region, SonataAdminBundle:CRUD]
        tags:
          - {name: sonata.admin, manager_type: orm, group: Administration, label: Region}

    ns_sentinel.admin.country:
        class: NS\SentinelBundle\Admin\CountryAdmin
        arguments: [~, NS\SentinelBundle\Entity\Country, SonataAdminBundle:CRUD]
        tags:
          - {name: sonata.admin, manager_type: orm, group: Administration, label: Country}

    ns_sentinel.admin.site:
        class: NS\SentinelBundle\Admin\SiteAdmin
        arguments: [~, NS\SentinelBundle\Entity\Site, SonataAdminBundle:CRUD]
        tags:
          - {name: sonata.admin, manager_type: orm, group: Administration, label: Site}

    ns_sentinel.admin.user:
        class: NS\SentinelBundle\Admin\UserAdmin
        arguments: [~, NS\SentinelBundle\Entity\User, SonataAdminBundle:CRUD]
        calls:
          - [ setEncoderFactory, [ "@security.encoder_factory" ] ]
          - [ setSecurityContext, [ "@security.context" ] ]
        tags:
          - {name: sonata.admin, manager_type: orm, group: Users, label: User}

    ns_sentinel.admin.acl:
        class: NS\SentinelBundle\Admin\ACLAdmin
        arguments: [~, NS\SentinelBundle\Entity\ACL, SonataAdminBundle:CRUD]
        tags:
          - {name: sonata.admin, manager_type: orm, group: Administration, label: ACL, show_in_dashboard: false}

    ns_sentinel.admin.reference_lab:
        class: NS\SentinelBundle\Admin\ReferenceLabAdmin
        arguments: [~, NS\SentinelBundle\Entity\ReferenceLab, SonataAdminBundle:CRUD]
        tags:
            - {name: sonata.admin, manager_type: orm, group: Administration, label: Reference Labs}
